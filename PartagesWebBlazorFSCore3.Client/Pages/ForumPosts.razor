@page "/forumPosts/{id:int}"
@inject LocalStorage Storage
@inject IUriHelper UriHelper
@inject IJsAlertifyService JsAlertifyService
@inject IJsMomentService JsMomentService
@inject IHttpForumTopicService HttpForumTopicService
@inject IHttpForumPostService HttpForumPostService
@implements IDisposable
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.RegularExpressions
@using System.Collections
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage
@using PartagesWebBlazorFSCore3.Client.Helpers
@using PartagesWebBlazorFSCore3.Client.Services.Http
@using PartagesWebBlazorFSCore3.Client.Services.Js
@using PartagesWebBlazorFSCore3.Shared.Dtos.Output.Forum.ForumPost.ForList
@using PartagesWebBlazorFSCore3.Shared.Dtos.Output.Forum.ForumTopic.ForSingleSelect
@using PartagesWebBlazorFSCore3.Shared.Helpers

<NavBarTop />

<h1 class="title is-3">Forum</h1>

@if (items == null || forumTopic == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <p><a href="forumCategories">Index du forum</a> » <a href="forumTopics/@forumTopic.ForumCategorieId">@forumTopic.ForumCategorie.Name</a> » <a href="forumPosts/@id">@forumTopic.Name</a></p>
    <div class="columns columns-top">
        <div class="column @(Storage["token"] == null ? "is-8" : "is-6")">
            <p><b>Contenu</b></p>
        </div>
        @if (Storage["token"] != null)
        {
            <div class="column is-2">
                <p><b>Citation</b></p>
            </div>
        }
        <div class="column is-4">
            <p><b>Par</b></p>
        </div>
    </div>
    @foreach (var item in items)
    {
    <div class="columns">
        <div class="column @(Storage["token"] == null ? "is-8" : "is-6")">
            <p>
                <b>Re: @item.ForumTopic.Name</b>
            </p>
            <p class="small-user">
                par @item.User.Username.CapitalizeFirst() @itemsDate[item.Id].ToString()
            </p>
            <p>@((MarkupString)(Regex.Replace(item.Content, @"(\r\n)|\n|\r", "<br />")))</p>
        </div>
        @if (Storage["token"] != null)
        {
            <div class="column is-2">
                <p>
                    <a href="/newForumPost/@item.ForumTopicId/@item.Id" class="button is-primary is-outlined is-small">
                        <span class="icon is-small">
                            <i class="fas fa-quote-right"></i>
                        </span>
                    </a>
                </p>
            </div>
        }
        <div class="column is-4">
            @if (Storage["token"] != null && (!item.SwCurrentUser ?? false))
            {
                <p class="small-user">
                    @item.User.Username.CapitalizeFirst()<br />
                    Postes : @item.User.MessageCount<br />
                    Membre depuis : @itemsUserDateCreated[item.Id].ToString()<br />
                    Contact
                    <a href="some/link" class="button is-primary is-outlined is-small">
                        <span class="icon is-small">
                            <i class="far fa-envelope"></i>
                        </span>
                    </a>
                </p>
            }
            else
            {
                <p class="small-user">
                    @item.User.Username.CapitalizeFirst()<br />
                    Postes : @item.User.MessageCount<br />
                    Membre depuis : @itemsUserDateCreated[item.Id].ToString()<br />@*(MomentService.Format(item.User.Created.ToString()))<br />*@
                </p>
            }
         </div>
    </div>
    }
    @if (Storage["token"] != null)
    {
        <button class="button is-primary" onclick="@NewReply">Répondre</button>
    }
    <BulmaPagination PageCount="@pagination.TotalPages" CurrentPage="@pagination.CurrentPage" OnPageChanged="OnPageChange"></BulmaPagination>
    }
@functions {
    // ForumTopic id
    [Parameter] int id { get; set; }
    ForumPostForListDto[] items;
    Hashtable itemsDate = new Hashtable();
    Hashtable itemsUserDateCreated = new Hashtable();
    ForumTopicForSelectDto forumTopic;
    PaginationHeader pagination = new PaginationHeader();
    string PageQuery { get; set; }

    protected override async Task OnInitAsync()
    {
        // Query param detection
        RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;

        // Load data with query on load page
        await LoadDatas(Int32.Parse(PageQuery) > 0 ? Int32.Parse(PageQuery) : 1);
        StateHasChanged();
    }

    private async Task LoadDatas(int page)
    {
        HttpResponseMessage response;

        // Get ForumTopic with ForumCategorie relation
        response = await HttpForumTopicService.GetForumTopic(id);
        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                string content = await response.Content.ReadAsStringAsync();
                forumTopic = Json.Deserialize<ForumTopicForSelectDto>(content);
                break;
            default:
                JsAlertifyService.Open($"Erreur lors du chargement du sujet n° {id} du forum", TypeAlertify.Error);
                UriHelper.NavigateTo("/forumCategories");
                break;
        }

        // GetForumPosts
        response = await HttpForumPostService.GetForumPosts(id, page);
        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                string content = await response.Content.ReadAsStringAsync();
                items = Json.Deserialize<ForumPostForListDto[]>(content);
                var head = response.Headers.GetValues("Pagination");
                pagination = Json.Deserialize<PaginationHeader>(head.FirstOrDefault());

                // Hashtable for date async
                itemsDate = new Hashtable();
                itemsUserDateCreated = new Hashtable();
                foreach (var item in items)
                {
                    itemsDate.Add(item.Id, await JsMomentService.FromNow(item.Date.ToString()));
                    itemsUserDateCreated.Add(item.Id, await JsMomentService.Format(item.User.Created.ToString()));
                }
                break;
            default:
                JsAlertifyService.Open($"Erreur lors du chargement des sujets du forum de la catégorie {forumTopic.ForumCategorie.Name}, sujet {forumTopic.Name}", TypeAlertify.Error);
                UriHelper.NavigateTo("/forumCategories");
                break;
        };
    }

    private async Task OnPageChange(int page)
    {
        await LoadDatas(page);
        StateHasChanged();
    }

    private void OnLocationChanges(object sender, string location) => RefreshType();

    private void RefreshType()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());
        PageQuery = QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var page) ? page.First() : "";
        if (PageQuery == "")
        {
            PageQuery = "1";
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        UriHelper.OnLocationChanged -= OnLocationChanges;
    }

    private void NewReply()
    {
        //{ForumTopicId}/{No quote == 0}
        UriHelper.NavigateTo($"/newForumPost/{id}/0");
    }
    }