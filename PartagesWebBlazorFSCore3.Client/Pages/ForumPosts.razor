@page "/forumPosts/{id:int}"
@inject IJSRuntime JsRuntime
@inject IUriHelper UriHelper
@inject LocalStorage Storage
@inject IAlertifyService AlertifyService
@inject IHttpForumTopicService HttpForumTopicService
@inject IHttpForumPostService HttpForumPostService
@implements IDisposable
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using Microsoft.AspNetCore.WebUtilities;
@using PartagesWebBlazorFSCore3.Client.Helpers;
@using PartagesWebBlazorFSCore3.Client.Services;
@using PartagesWebBlazorFSCore3.Client.Services.Http;
@using PartagesWebBlazorFSCore3.Shared.Dtos.Output.Forum.ForumTopic.ForSingleSelect;
@using PartagesWebBlazorFSCore3.Shared.Dtos.Output.Forum.ForumPost.ForList;
@using PartagesWebBlazorFSCore3.Shared.Helpers;

<h1>Forum</h1>

@if (items == null || forumTopic == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <p><a href="forumCategories">Index du forum</a> » <a href="forumTopics/@forumTopic.ForumCategorieId">@forumTopic.ForumCategorie.Name</a> » <a href="forumPosts/@id">@forumTopic.Name</a></p>
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Sujets</th>
                <th>Postes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Date</td>
                    <td>@item.Content</td>
                    <td>@item.User.Username</td>
                </tr>
            }
        </tbody>
    </table>
    <BulmaPagination PageCount="@pagination.TotalPages" CurrentPage="@pagination.CurrentPage" OnPageChanged="OnPageChange"></BulmaPagination>
}

@functions {
    // ForumTopic id
    [Parameter] int id { get; set; }
    ForumPostForListDto[] items;
    ForumTopicForSelectDto forumTopic;
    PaginationHeader pagination = new PaginationHeader();
    string PageQuery { get; set; }

    protected override async Task OnInitAsync()
    {
        // Query param detection
        RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;

        // Load data with query on load page
        await LoadDatas(Int32.Parse(PageQuery) > 0  ? Int32.Parse(PageQuery) : 1);
        StateHasChanged();
    }

    private async Task LoadDatas(int page)
    {
        HttpResponseMessage response;

        // Get ForumTopic with ForumCategorie relation
        response = await HttpForumTopicService.GetForumTopic(id);
        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                string content = await response.Content.ReadAsStringAsync();
                forumTopic = Json.Deserialize<ForumTopicForSelectDto>(content);
                break;
            default:
                AlertifyService.Open($"Erreur lors du chargement du sujet n° {id} du forum", TypeAlertify.Error);
                UriHelper.NavigateTo("/forumCategories");
                break;
        }

        // GetForumPosts
        response = await HttpForumPostService.GetForumPosts(id, page);
        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                string content = await response.Content.ReadAsStringAsync();
                items = Json.Deserialize<ForumPostForListDto[]>(content);
                var head = response.Headers.GetValues("Pagination");
                pagination = Json.Deserialize<PaginationHeader>(head.FirstOrDefault());
                break;
            default:
                AlertifyService.Open($"Erreur lors du chargement des sujets du forum de la catégorie {forumTopic.ForumCategorie.Name}, sujet {forumTopic.Name}", TypeAlertify.Error);
                UriHelper.NavigateTo("/forumCategories");
                break;
        };
    }

    private async Task OnPageChange(int page)
    {
        await LoadDatas(page);
        StateHasChanged();
    }

    private void OnLocationChanges(object sender, string location) => RefreshType();

    private void RefreshType()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());
        PageQuery = QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var page) ? page.First() : "";
        if (PageQuery == "")
        {
            PageQuery = "1";
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        UriHelper.OnLocationChanged -= OnLocationChanges;
    }
}
