@page "/newForumPost/{id:int}/{idQuote:int}"
@inject IUriHelper UriHelper
@inject IJsAlertifyService JsAlertifyService
@inject IHttpForumTopicService HttpForumTopicService
@inject IHttpForumPostService HttpForumPostService
@using PartagesWebBlazorFSCore3.Client.Helpers
@using PartagesWebBlazorFSCore3.Client.Services.Http
@using PartagesWebBlazorFSCore3.Client.Services.Js
@using PartagesWebBlazorFSCore3.Shared.Dtos.Output.Forum.ForumTopic.ForSingleSelect
@using PartagesWebBlazorFSCore3.Shared.Dtos.Output.Forum.ForumPost.ForSelect
@using PartagesWebBlazorFSCore3.Shared.Dtos.Input.Forum.ForumPost.ForReply
@using PartagesWebBlazorFSCore3.Shared.Helpers

<NavBarTop />

<h1 class="title is-3">Forum</h1>

@if (forumTopic == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <p><a href="forumCategories">Index du forum</a> » <a href="forumTopics/@forumTopic.ForumCategorieId">@forumTopic.ForumCategorie.Name</a> » <a href="forumPosts/@forumTopic.Id">@forumTopic.Name</a> » <a href="newForumReply/@id">Réponse</a></p>
    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (CantCreatePost != "")
        {
            <ul class="validation-errors">
                <li class="validation-message">@CantCreatePost</li>
            </ul>
        }
        <div class="field">
            <label class="label">Contenu</label>
            <p class="control">
                <InputTextArea bind-Value="@model.Content" class="textarea textarea-height-define" />
                <span class="help is-danger"><ValidationMessage For="@(() => model.Content)" /></span>
            </p>
        </div>
        <button class="button is-primary" type="submit">Crée un nouveau sujet</button>
    </EditForm>
}

@functions {
    // ForumTopic id
    [Parameter] int id { get; set; }
    // Quote id, 0 = no quote
    [Parameter] int idQuote { get; set; }
    ForumTopicForSelectDto forumTopic;
    ForumPostForReplyDto model = new ForumPostForReplyDto();
    string CantCreatePost = "";

    protected override async Task OnInitAsync()
    {
        // Load data with query on load page
        await LoadData();
        StateHasChanged();
    }

    private async Task LoadData()
    {
        HttpResponseMessage response;

        response = await HttpForumTopicService.GetForumTopic(id);
        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                model.ForumTopicId = id;
                string content = await response.Content.ReadAsStringAsync();
                forumTopic = Json.Deserialize<ForumTopicForSelectDto>(content);
                break;
            default:
                JsAlertifyService.Open($"Erreur lors du chargement du sujet {id} du forum", TypeAlertify.Error);
                UriHelper.NavigateTo("/");
                break;
        }

        // Loading quote
        if (idQuote > 0)
        {
            response = await HttpForumPostService.GetForumPost(idQuote);
            switch (response.StatusCode)
            {
                case System.Net.HttpStatusCode.OK:
                    string content = await response.Content.ReadAsStringAsync();
                    ForumPostForSelectDto forumPostQuote = Json.Deserialize<ForumPostForSelectDto>(content);
                    model.Content = $"{forumPostQuote.User.Username} : “{forumPostQuote.Content}”";
                    StateHasChanged();
                    break;
                default:
                    JsAlertifyService.Open($"Erreur lors du chargement de la citation du poste dans le sujet « {forumTopic.Name} » du forum", TypeAlertify.Error);
                    break;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        CantCreatePost = "";
        var response = await HttpForumPostService.PostReplyForumPoste(model);
        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                JsAlertifyService.Open($"Réponse postée au sujet « {forumTopic.Name.CapitalizeFirst()} »", TypeAlertify.Success);
                UriHelper.NavigateTo($"/forumTopics/{forumTopic.ForumCategorieId}");
                break;
            case System.Net.HttpStatusCode.BadRequest:
                CantCreatePost = await response.Content.ReadAsStringAsync();
                JsAlertifyService.Open(CantCreatePost, TypeAlertify.Error);
                break;
        };
    }
}
