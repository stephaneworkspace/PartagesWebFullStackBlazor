@page "/forumTopics/{id:int}"
@inject LocalStorage Storage
@inject IUriHelper UriHelper
@inject IJsAlertifyService JsAlertifyService
@inject IJsMomentService JsMomentService
@inject IHttpForumCategorieService HttpForumCategorieService
@inject IHttpForumTopicService HttpForumTopicService
@implements IDisposable
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage
@using PartagesWebBlazorFSCore3.Client.Helpers
@using PartagesWebBlazorFSCore3.Client.Services.Http
@using PartagesWebBlazorFSCore3.Client.Services.Js
@using PartagesWebBlazorFSCore3.Shared.Dtos.Output.Forum.ForumCategorie.ForSelect
@using PartagesWebBlazorFSCore3.Shared.Dtos.Output.Forum.ForumTopic.ForList
@using PartagesWebBlazorFSCore3.Shared.Helpers

<NavBarTop />

<h1 class="title is-3">Forum</h1>

@if (items == null || forumCategorie == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <p><a href="forumCategories">Index du forum</a> » <a href="forumTopics/@id">@forumCategorie.Name</a></p>
    <table class="table is-striped is-hoverable is-fullwidth">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Vues</th>
                <th>Postes</th>
                <th>Dernière réponse</th>
            </tr>
        </thead>
        <tbody>
            @if (items.Length == 0)
            {
                <tr>
                    <td>Aucun sujet</td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
            }
            else
            {
                @foreach (var item in items)
                {
                    <tr>
                        <td><a href="forumPosts/@item.Id">@item.Name</a></td>
                        <td>@item.View</td>
                        <td>@item.CountForumPost</td>
                        <td><a href="forumPosts/@item.Id?page=@item.PageLastForumPost">@item.Name</a> par @item.LastForumPost.User.Username.CapitalizeFirst() @itemsDate[item.Id].ToString()</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    @if (Storage["token"] != null && Storage["username"] != null)
    {
        <button class="button is-primary" onclick="@NewTopic">Nouveau sujet</button>
    }
    <BulmaPagination PageCount="@pagination.TotalPages" CurrentPage="@pagination.CurrentPage" OnPageChanged="OnPageChange"></BulmaPagination>
    }

    @functions {
    // ForumCategorie id
    [Parameter] int id { get; set; }
    ForumTopicForListDto[] items;
    Hashtable itemsDate = new Hashtable();
    ForumCategorieForSelectDto forumCategorie;
    PaginationHeader pagination = new PaginationHeader();
    string PageQuery { get; set; }

    protected override async Task OnInitAsync()
    {
        // Query param detection
        RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;

        // Load data with query on load page
        await LoadDatas(Int32.Parse(PageQuery) > 0 ? Int32.Parse(PageQuery) : 1);
        StateHasChanged();
    }

    private async Task LoadDatas(int page)
    {
        HttpResponseMessage response;

        response = await HttpForumCategorieService.GetForumCategorie(id);
        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                string content = await response.Content.ReadAsStringAsync();
                forumCategorie = Json.Deserialize<ForumCategorieForSelectDto>(content);
                break;
            default:
                JsAlertifyService.Open($"Erreur lors du chargement de la catégorie {id} du forum", TypeAlertify.Error);
                UriHelper.NavigateTo("/");
                break;
        }

        response = await HttpForumTopicService.GetForumTopics(id, page);
        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                string content = await response.Content.ReadAsStringAsync();
                items = Json.Deserialize<ForumTopicForListDto[]>(content);
                var head = response.Headers.GetValues("Pagination");
                pagination = Json.Deserialize<PaginationHeader>(head.FirstOrDefault());

                // Hashtable for date async
                itemsDate = new Hashtable();
                foreach (var item in items)
                {
                    itemsDate.Add(item.Id, await JsMomentService.FromNow(item.LastForumPost.Date.ToString()));
                }
                break;
            default:
                JsAlertifyService.Open($"Erreur lors du chargement des sujets du forum de la catégorie {forumCategorie.Name}", TypeAlertify.Error);
                UriHelper.NavigateTo("/");
                break;
        };
    }

    private async Task OnPageChange(int page)
    {
        await LoadDatas(page);
        StateHasChanged();
    }

    private void NewTopic()
    {
        UriHelper.NavigateTo($"/newForumTopic/{id}");
    }

    private void OnLocationChanges(object sender, string location) => RefreshType();

    private void RefreshType()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());
        PageQuery = QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var page) ? page.First() : "";
        if (PageQuery == "")
        {
            PageQuery = "1";
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        UriHelper.OnLocationChanged -= OnLocationChanges;
    }
    }
