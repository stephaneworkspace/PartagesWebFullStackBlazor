@page "/signUp"
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject IUriHelper UriHelper
@inject AlertifyService _alertifyService
@inject HttpAuthService _httpAuthService
@using PartagesWebBlazorFSCore3.Shared.Dtos.Input.Auth;
@using PartagesWebBlazorFSCore3.Client.Services;
@using PartagesWebBlazorFSCore3.Client.Services.Http;
@using PartagesWebBlazorFSCore3.Client.Component;
@using System.Text;
@using System.ComponentModel;
@using Microsoft.AspNetCore.Blazor.Services;
<EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (UserExistText != "")
    {
        <ul class="validation-errors">
            <li class="validation-message">@UserExistText</li>
        </ul>
    }
    @*<ServerSideValidator ref="serverSideValidator" />*@
    <div class="field">
        <label class="label">Nom d'utilisateur</label>
        <p class="control has-icons-left">
            <!--has-icons-right-->
            <InputText id="username" bind-Value="@model.Username" class="input" />
            <span class="icon is-small is-left">
                <i class="fas fa-user"></i>
            </span>
            @*
                <span class="icon is-small is-right">
                    <i class="fas fa-check"></i>
                </span>
                @if (swAvailable)
                {
                    <span class="help is-success">Ce nom d'utilisateur est disponible</span>
                }
            *@
            <span class="help is-danger"><ValidationMessage For="@(() => model.Username)" /></span>
        </p>
    </div>
    <div class="field">
        <label class="label">Mot de passe</label>
        <p class="control has-icons-left">
            <!-- https://github.com/aspnet/AspNetCore/issues/9179  added this to the 3.0.0-preview6 milestone  -->
            <!--<MyInput id="password" type="password" value="@model.Password" class="input" />-->
            <InputText id="password" bind-Value="@model.Password" class="input" />
            <span class="icon is-small is-left">
                <i class="fas fa-lock"></i>
            </span>
            <span class="help is-danger"><ValidationMessage For="@(() => model.Password)" /></span>
        </p>
    </div>
    <div class="field">
        <p class="control">
            <button class="button is-success" type="submit">
                Register
            </button>
        </p>
    </div>
</EditForm>
@functions {
    private UserForRegisterInputDto model = new UserForRegisterInputDto();

    // 15.05: For info // ServerSideValidator serverSideValidator; // not in use

    string UserExistText = "";
    @*
        // 15.05 -> For info
        bool swAvailable;
        protected async Task CheckIfUsernameAvailable(UIChangeEventArgs e)
        {
            if ((string)e.Value != "")
            {
                var client = new HttpClient();
                UserForCheckIfAvailableDto dto = new UserForCheckIfAvailableDto();
                dto.Username = (string)e.Value;
                swAvailable = await Http.PostJsonAsync<Boolean>("api/Auth/available", dto);
            }
            else
            {
                swAvailable = true;
            }
        }
    *@
protected async Task HandleValidSubmit()
{
    /*
        await ClientFactory.Create("/api/account/register", createButton)
            .OnBadRequest<Dictionary<string, List<string>>>(errors => {

                serverSideValidator.DisplayErrors(errors);
            })
            .OnOK(async () =>
            {
                await JsInterop.Toastr("success", "Successfully registered, please confirm your account by clicking on the link in the email sent to " + registerCommand.Email);
                registerCommand = new RegisterCommand();
                StateHasChanged();
            })
            .Post(registerCommand);*/
    UserExistText = "";
    /*
    var client = new HttpClient();
    var requestJson = Json.Serialize(model);
    HttpRequestMessage req = new HttpRequestMessage(HttpMethod.Post, "http://localhost:54789/api/Auth/register");
    // req.Headers.Add("Authorization", $"bearer {bearer}");
    req.Content = new StringContent(requestJson, Encoding.UTF8, "application/json");
    var response = await client.SendAsync(req);*/
    var client = new HttpClient();
    var httpAuthService = new HttpAuthService(client);
    var response = await _httpAuthService.PostRegister(model);
    switch (response.StatusCode)
    {
        case System.Net.HttpStatusCode.Created:
            UserExistText = "";
            break;
        case System.Net.HttpStatusCode.BadRequest:
            UserExistText = await response.Content.ReadAsStringAsync();
            _alertifyService = new AlertifyService(JsRuntime);
            _alertifyService.Open(UserExistText, AlertifyService.Type.Error);
            UriHelper.NavigateTo("/");
            break;
    };
    /*
    await client.PostJsonAsync("/api/Auth/register", model)
        .OnBadRequest<Dictionary<string, List<string>>>(errors => {
            serverSideValidator.DisplayErrors(errors);
        })
        .OnOK(async () =>
        {
            await JsInterop.Toastr("success", "Successfully registered, please confirm your account by clicking on the link in the email sent to " + registerCommand.Email);
            registerCommand = new RegisterCommand();
            StateHasChanged();
        })
        .Post(registerCommand);  */
}
}
